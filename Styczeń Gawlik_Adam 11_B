#include <iostream>
#include <fstream>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */
using namespace std;


//-----------------------------------------------------------------------------------------------------------------
//Zad. 1.1
//-----------------------------------------------------------------------------------------------------------------
/*struct Student
{
	int Age;
	int Height;
	int Semester;	
};

void PrintStudent(Student *s)
{
	
	cout<<"Age: "<<s->Age<<endl<<"Height: "<<s->Height<<endl<<"Semester: "<<s->Semester<<endl;

	
}

bool AreEqueal(Student *s1,Student *s2)
{
	if (s1->Age==s2->Age && s1->Height==s2->Height && s1->Semester==s2->Semester ) 
	{
  	return 1;
	}
	else
	{
	return 0;
	} 

}

Student* Create(int age,int height, int semester)
{

	Student *student = new Student;
	student->Age=age;
	student->Height=height;
	student->Semester=semester;
};
int main(int argc, char** argv) {

	Student *JanKowalski=Create(23,178,1);
	Student *KamilNowak=Create(21,189,2);
	PrintStudent(JanKowalski);
	PrintStudent(KamilNowak);
	if(AreEqueal(JanKowalski,KamilNowak)) 
	{
		cout<<"Dane są identyczne !!!";
	}
	else 
	{
		cout<<"Dane roznia sie !!!";
	}
	
	delete [] JanKowalski;
};
*/
//-----------------------------------------------------------------------------------------------------------------
//Zad. 1.2
//-----------------------------------------------------------------------------------------------------------------
/*
struct Student
{
	int Age;
	int Height;
	int Semester;	
};

void PrintStudent(Student *s)
{
	
	cout<<"Age: "<<s->Age<<endl<<"Height: "<<s->Height<<endl<<"Semester: "<<s->Semester<<endl;

	
}

bool AreEqueal(Student *s1,Student *s2)
{
	if (s1->Age==s2->Age && s1->Height==s2->Height && s1->Semester==s2->Semester ) 
	{
  	return 1;
	}
	else
	{
	return 0;
	} 

}

Student* Create(int age,int height, int semester)
{

	Student *student = new Student;
	student->Age=age;
	student->Height=height;
	student->Semester=semester;
};
int main(int argc, char** argv) {
	
	Student **tab_of_students= new Student*;
		tab_of_students[0]=Create(19,201,1);
		tab_of_students[1]=Create(31,189,7);
		tab_of_students[2]=Create(29,165,6);
		PrintStudent(tab_of_students[0]);
		PrintStudent(tab_of_students[1]);
		PrintStudent(tab_of_students[2]);
		
	delete [] tab_of_students;
};
*/
//-----------------------------------------------------------------------------------------------------------------
//Zad. 2
//-----------------------------------------------------------------------------------------------------------------
/*
struct Node
{
    int Value;
    Node * Next;
};

Node * Create (int value)
{
 Node *wezel= new Node;
 wezel->Next=wezel;
 wezel->Value= value;
 return wezel;
}
Node * GetTail(Node* root)
{
	Node* korzen=root;
		while (korzen->Next!=root)
    	{
    		korzen=korzen->Next;
    	}
    return korzen;
}
void Add(Node* root, int value)
{

 Node* tail_node=GetTail(root);
 Node* nowy_wezel=new Node;
 tail_node->Next=nowy_wezel;
 nowy_wezel->Next=root;
 nowy_wezel->Value=value;

}
void PrintList(Node* root)
{
	Node* obecny=root;
    Node* ostatni=GetTail(root);
    	do
		{
        cout<<" "<<obecny->Value;
        obecny=obecny->Next;
        
    	} while (obecny!=ostatni->Next);
    cout<<endl;
	

}


void RemoveNode(Node* root, int value)
{
Node* obecny=root;
Node* spr;
	while (obecny->Next!=root)
	{
	spr=obecny->Next;
    if (spr->Value==value)
		{
    	obecny->Next=spr->Next;
        delete [] spr;
    	}
		obecny=obecny->Next;

    }

}

void FreeList(Node* root)
{
Node * obecny = root;
Node * nastepny = NULL;

  while (NULL != obecny)
  {
	nastepny = obecny->Next;
	delete [] obecny;
	obecny = nastepny;
  }
  delete [] root;
}


int Count(Node* root)
{

Node* obecny=root;
int ilosc=0;
	while (obecny->Next!=root)
	{
        obecny=obecny->Next;
        ilosc+=1;
	}

  return ilosc;


}
int main(int argc, const char * argv[])
{
	Node *root = Create(2);
	PrintList(root); // 2

	
	Add(root, 4);
	Add(root, 8);
	Add(root, 16);
 	PrintList(root); // 2 -> 4 -> 8 -> 16
 	
 	Add(root, 20);
 	PrintList(root); // 2 -> 4 -> 8 -> 16 -> 20
 	
	cout<<"Ostatni wezel ma wartosc: "<< GetTail(root)->Value<<endl; // 20
	
 	Add(root,16);
 	PrintList(root); // 2 -> 4 -> 8 -> 16 -> 20 -> 16
	cout<<Count(root)<<endl; //6

 	RemoveNode(root, 8);
 	PrintList(root); // 2 -> 4 -> 16 -> 20 -> 16
 	RemoveNode(root,10); //element nieistniejący
	PrintList(root); // 2 -> 4 -> 16 -> 20 -> 16
 	RemoveNode(root, 16); // usuń wszystkie węzły o wartości 16
 	PrintList(root); // 2 -> 4 -> 20
 	
	cout<<Count(root); // 3

 	FreeList(root); // zwolnienie pamięci na wszystkie węzły.
 	PrintList(root); // (nic, lista niezaalokowana)
 	
	return 0;
}

*/
//-----------------------------------------------------------------------------------------------------------------
//Zad. 3.1
//-----------------------------------------------------------------------------------------------------------------

/*
int main()
{
	int liczba=10;
    fstream plik;
    plik.open( "numbers.txt", ios::in | ios::out );
    if( plik.good() == true )
    {
    	while(liczba!=0)
    	{
    		cout<<"Prosze podać liczbe: ";
    		cin>>liczba;
    		plik<<liczba;
    		
		}
        
        
        plik.close();
    }
    return ( 0 );
}

*/
//-----------------------------------------------------------------------------------------------------------------
//Zad. 3.2
//-----------------------------------------------------------------------------------------------------------------


struct Node
{
    int Value;
    Node * Next;
};

Node * Create (int value)
{
	Node *wezel= new Node;
	wezel->Next=wezel;
	wezel->Value=value;
	return wezel;
}
Node * GetTail(Node* root)
{
	Node* korzen=root;
		while (korzen->Next!=root)
    	{
    		korzen=korzen->Next;
    	}
    return korzen;
}
void Add(Node* root, int value)
{

 Node* tail_node=GetTail(root);
 Node* nowy_wezel=new Node;
 tail_node->Next=nowy_wezel;
 nowy_wezel->Next=root;
 nowy_wezel->Value=value;

}
void PrintList(Node* root)
{
	Node* obecny=root;
    Node* ostatni=GetTail(root);
    	do
		{
        cout<<" "<<obecny->Value;
        obecny=obecny->Next;
        
    	} while (obecny!=ostatni->Next);
    cout<<endl;
	

}

int main()
{
fstream plik( "numbers.txt", ios::in ); 
if( plik.good() == false)
{
cout<< " Nastapil problem z plikiem !!!";
}
else
{
char dane;
int liczba;
plik.get(dane)>>liczba;
Node *root = Create(liczba);
 while (!plik.eof())
 {
 	plik.get(dane);
 	Add(root,dane);
 }
 PrintList(root);

plik.close();
}
}
